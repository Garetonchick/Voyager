{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  // List of acceptable log types\n  const logTypes = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Check for nearby logs first\n  let logBlock = null;\n  for (const type of logTypes) {\n    logBlock = bot.findBlock({\n      matching: mcData.blocksByName[type]?.id,\n      maxDistance: 32\n    });\n    if (logBlock) break;\n  }\n\n  // If no log found nearby, explore to find one\n  if (!logBlock) {\n    const randomDirection = new Vec3(Math.floor(Math.random() * 3) - 1,\n    // -1, 0, or 1\n    0, Math.floor(Math.random() * 3) - 1 // -1, 0, or 1\n    );\n    logBlock = await exploreUntil(bot, randomDirection, 60, () => {\n      for (const type of logTypes) {\n        const block = bot.findBlock({\n          matching: mcData.blocksByName[type]?.id,\n          maxDistance: 32\n        });\n        if (block) return block;\n      }\n      return null;\n    });\n    if (!logBlock) {\n      bot.chat(\"Could not find any wood logs after exploring\");\n      return;\n    }\n  }\n\n  // Mine the log\n  bot.chat(\"Found a wood log, mining...\");\n  await mineBlock(bot, mcData.blocks[logBlock.type].name, 1);\n  bot.chat(\"Successfully mined 1 wood log!\");\n}", "description": "async function mineWoodLog(bot) {\n    // The function searches for a wood log to mine, either nearby or by exploring the environment. It iterates through a list of acceptable log types to find a suitable block. If no log is found nearby, it explores in a random direction until a log is located. Once a log is found, it mines one block of that log type. Finally, it sends a confirmation message to the chat indicating successful mining.\n}"}, "craftOakPlanks": {"code": "async function craftOakPlanks(bot) {\n  // Check if we have oak logs\n  if (bot.inventory.count(mcData.itemsByName.oak_log.id) < 1) {\n    bot.chat(\"Need to collect oak logs first\");\n    await mineWoodLog(bot);\n  }\n\n  // Place crafting table\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  bot.chat(\"Placed crafting table\");\n\n  // Craft oak planks\n  await craftItem(bot, \"oak_planks\", 1); // 1 recipe makes 4 planks\n  bot.chat(\"Crafted 4 oak planks\");\n\n  // Verify\n  const planksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  if (planksCount >= 4) {\n    bot.chat(\"Successfully crafted 4 oak planks!\");\n  } else {\n    bot.chat(\"Failed to craft 4 oak planks\");\n  }\n}", "description": "async function craftOakPlanks(bot) {\n    // The function crafts 4 oak planks by first checking if there are enough oak logs in the inventory and mining one if necessary. It then places a crafting table at a nearby position. After placing the crafting table, the function crafts one recipe of oak planks, which yields 4 planks. Finally, it verifies that at least 4 oak planks were successfully crafted and sends a confirmation or failure message to the chat.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  // Check if we have enough oak planks\n  const planksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  if (planksCount < 4) {\n    bot.chat(\"Not enough oak planks to craft a crafting table\");\n    return;\n  }\n\n  // Craft the crafting table\n  bot.chat(\"Crafting a crafting table...\");\n  await craftItem(bot, \"crafting_table\", 1);\n\n  // Verify\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  if (craftingTableCount >= 1) {\n    bot.chat(\"Successfully crafted a crafting table!\");\n  } else {\n    bot.chat(\"Failed to craft a crafting table\");\n  }\n}", "description": "async function craftCraftingTable(bot) {\n    // The function checks if the bot has at least 4 oak planks in its inventory to craft a crafting table. If there are enough planks, it proceeds to craft a crafting table using the `craftItem` function. After crafting, it verifies if the crafting table was successfully added to the inventory. If the crafting table is present, a success message is displayed; otherwise, a failure message is shown.\n}"}, "obtainWoodLog": {"code": "async function obtainWoodLog(bot) {\n  // List of acceptable log types\n  const logTypes = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Check inventory first\n  for (const type of logTypes) {\n    if (bot.inventory.count(mcData.itemsByName[type]?.id) > 0) {\n      bot.chat(\"Already have a wood log\");\n      return;\n    }\n  }\n\n  // Find the nearest log block\n  let logBlock = null;\n  for (const type of logTypes) {\n    logBlock = bot.findBlock({\n      matching: mcData.blocksByName[type]?.id,\n      maxDistance: 32\n    });\n    if (logBlock) break;\n  }\n\n  // If no log found nearby, explore to find one\n  if (!logBlock) {\n    const randomDirection = new Vec3(Math.floor(Math.random() * 3) - 1,\n    // -1, 0, or 1\n    0, Math.floor(Math.random() * 3) - 1 // -1, 0, or 1\n    );\n    logBlock = await exploreUntil(bot, randomDirection, 60, () => {\n      for (const type of logTypes) {\n        const block = bot.findBlock({\n          matching: mcData.blocksByName[type]?.id,\n          maxDistance: 32\n        });\n        if (block) return block;\n      }\n      return null;\n    });\n    if (!logBlock) {\n      bot.chat(\"Could not find any wood logs after exploring\");\n      return;\n    }\n  }\n\n  // Mine the log\n  bot.chat(\"Found a wood log, mining...\");\n  await mineBlock(bot, mcData.blocks[logBlock.type].name, 1);\n\n  // Verify\n  for (const type of logTypes) {\n    if (bot.inventory.count(mcData.itemsByName[type]?.id) > 0) {\n      bot.chat(`Successfully obtained 1 ${type}!`);\n      return;\n    }\n  }\n  bot.chat(\"Failed to obtain wood log\");\n}", "description": "async function obtainWoodLog(bot) {\n    // The function is designed to obtain a wood log for the bot. It first checks the bot's inventory to see if a wood log already exists. If not, it searches for the nearest log block within a 32-block radius. If no log is found nearby, the bot explores the environment randomly for a short period to locate one. Once a log block is found, it is mined. Finally, the function verifies that a wood log has been successfully added to the inventory and informs the bot.\n}"}, "obtainSticks": {"code": "async function obtainSticks(bot) {\n  // Check current stick count\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (sticksCount >= 2) {\n    bot.chat(`Already have ${sticksCount} sticks, no need to get more`);\n    return;\n  }\n\n  // If we don't have enough sticks, try breaking leaves first\n  const leavesBlocks = bot.findBlocks({\n    matching: block => {\n      return block.name.includes(\"leaves\");\n    },\n    maxDistance: 32,\n    count: 3 // Only need to break a few leaves\n  });\n  if (leavesBlocks.length > 0) {\n    bot.chat(\"Breaking leaves to get sticks...\");\n    for (const blockPos of leavesBlocks) {\n      const block = bot.blockAt(blockPos);\n      await bot.dig(block);\n      // Check if we got enough sticks\n      if (bot.inventory.count(mcData.itemsByName.stick.id) >= 2) {\n        bot.chat(\"Got enough sticks from leaves!\");\n        return;\n      }\n    }\n  }\n\n  // If still not enough, try crafting from planks\n  const planksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  if (planksCount >= 1) {\n    bot.chat(\"Crafting sticks from planks...\");\n    await craftItem(bot, \"stick\", 1); // 1 recipe makes 4 sticks\n    bot.chat(\"Crafted 4 sticks from planks!\");\n  } else {\n    bot.chat(\"Couldn't get sticks - no leaves or planks available\");\n  }\n}", "description": "async function obtainSticks(bot) {\n    // The function checks if the bot has at least 2 sticks, and if not, attempts to obtain more. If no leaves are available, it tries crafting sticks from oak planks. If leaves are available, it breaks a few leaves to get sticks, stopping when it has at least 2. If no leaves or planks are available, it informs the user that it couldn't get sticks.\n}"}}